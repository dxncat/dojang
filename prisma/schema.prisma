// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Range {
  id          Int            @id @default(autoincrement())
  nombre      String         @unique
  description String
  minHours    Int            @default(100) // Horas mínimas requeridas para este rango
  users       User[]
  histories   HistoryRange[]
  hoursRanges HoursRange[]
  schedules   Schedule[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  name             String
  password         String            @db.VarChar(255)
  posts            Post[]
  currentRange     Range?            @relation(fields: [currentRangeId], references: [id])
  currentRangeId   Int?
  histories        HistoryRange[]
  hoursRanges      HoursRange[]
  image            String?           @default("https://res.cloudinary.com/...")
  isAdmin          Boolean           @default(false)
  isActive         Boolean           @default(true)
  attendances      Attendance[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  packagePurchases PackagePurchase[] // Historial de compras
  availableHours   Int               @default(0) // Horas disponibles totales
}

model HistoryRange {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  range      Range     @relation(fields: [rangeId], references: [id])
  rangeId    Int
  createdAt  DateTime  @default(now())
  finishedAt DateTime?
}

model HoursRange {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  range   Range  @relation(fields: [rangeId], references: [id])
  rangeId Int
  hours   Int    @default(0)
}

model Package {
  id          Int               @id @default(autoincrement())
  name        String // "Paquete 100 horas"
  hours       Int // 100, 300, 500
  price       Float
  description String?
  purchases   PackagePurchase[]
  createdAt   DateTime          @default(now())
}

model Schedule {
  id          Int          @id @default(autoincrement())
  range       Range        @relation(fields: [rangeId], references: [id])
  rangeId     Int
  date        DateTime // Usamos DateTime para manejar fecha+hora
  startTime   String // Ej: "10:00"
  endTime     String // Ej: "12:00"
  isActive    Boolean      @default(true)
  attendances Attendance[]
}

model Attendance {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId Int
  attended   Boolean  @default(false)
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(true)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PackagePurchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  package   Package  @relation(fields: [packageId], references: [id])
  packageId Int
  hours     Int // Horas compradas (duplicado por si el paquete cambia después)
  remaining Int // Horas disponibles
  price     Float // Precio pagado (snapshot)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
